{"version":3,"file":"icon-picker.min.js","mappings":"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","sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap","webpack:///webpack/runtime/define property getters","webpack:///webpack/runtime/hasOwnProperty shorthand","webpack:///./src/js/utlis/utils.js","webpack:///./src/js/template.js","webpack:///./src/js/utlis/collections.js","webpack:///./src/js/IconPicker.js"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"IconPicker\"] = factory();\n\telse\n\t\troot[\"IconPicker\"] = factory();\n})(self, function() {\nreturn ","// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","function eventListener(method, elements, events, fn) {\n    if (!Array.isArray(elements)) {\n        elements = [elements];\n    }\n\n    if (!Array.isArray(events)) {\n        events = [events];\n    }\n\n    for (const el of elements) {\n        for (const ev of events) {\n            el[method](ev, fn);\n        }\n    }\n\n    return [].slice.call(arguments, 1);\n}\n\n/**\n * Add event to element.\n * @param elements DOM-Elements\n * @param events Event names\n * @param fn Callback\n * @param options Optional options\n * @return Array passed arguments\n */\nexport const addEvent = eventListener.bind(null, 'addEventListener');\n\n/**\n * Remove event from element.\n * @param elements DOM-Elements\n * @param events Event names\n * @param fn Callback\n * @param options Optional options\n * @return Array passed arguments\n */\nexport const removeEvent = eventListener.bind(null, 'removeEventListener');\n\n/**\n * Resolves a HTMLElement by query.\n * @param val\n * @returns {null|Document|Element}\n */\nexport function resolveElement(val) {\n    if (val instanceof HTMLElement) {\n        return val;\n    } else if (typeof val === 'string') {\n        return document.querySelector(val)\n    }\n\n    return null;\n}\n\n/**\n * Convert a template string into HTML DOM nodes\n * @param  {String} str The template string\n * @return {Node}       The template HTML\n */\nexport function stringToHTML(str) {\n    if (window.DOMParser) {\n        const parser = new DOMParser();\n        const doc = parser.parseFromString(str, 'text/html');\n        return doc.body.firstElementChild;\n    }\n\n    const dom = document.createElement('div');\n    dom.innerHTML = str;\n    return dom.firstElementChild;\n}\n\n/**\n * Check if item is an object\n * @param {Object} item\n * @returns {boolean}\n */\nexport function isObject(item) {\n    return (item && typeof item === 'object' && !Array.isArray(item));\n}\n\n/**\n *\n * @param target\n * @param source\n * @returns {Object}\n */\nexport function mergeDeep(target, source) {\n    let output = Object.assign({}, target);\n\n    if (isObject(target) && isObject(source)) {\n        Object.keys(source).forEach(key => {\n            if (isObject(source[key])) {\n                if (!(key in target))\n                    Object.assign(output, {[key]: source[key]});\n                else\n                    output[key] = mergeDeep(target[key], source[key]);\n            } else {\n                Object.assign(output, {[key]: source[key]});\n            }\n        });\n    }\n    return output;\n}\n\n/**\n *\n * @param callback\n * @param delay\n * @returns {(function(): void)|*}\n */\nexport function debounce(callback, delay){\n    var timer;\n    return function(){\n        var args = arguments;\n        var context = this;\n        clearTimeout(timer);\n        timer = setTimeout(function(){\n            callback.apply(context, args);\n        }, delay)\n    }\n}\n\n/**\n *\n * @param object\n * @param value\n * @returns {string}\n */\nexport function getKeyByValue(object, value) {\n    return Object.keys(object).find(key => object[key] === value);\n}\n","import {stringToHTML} from \"./utlis/utils\";\n\nexport default options => {\n    const {theme, i18n, closeOnSelect} = options;\n\n    const modalElement = getHTMLElements(`\n        <div class=\"icon-picker-modal\" tabindex=\"-1\" data-theme=\"${theme}\" data-element=\"modal\" aria-modal=\"true\" aria-labelledby=\"Icon picker modal\" role=\"dialog\">\n            <div class=\"icon-picker-modal__dialog\">\n                <div class=\"icon-picker-modal__header\" data-element=\"header\">\n                    ${typeof i18n['text:title'] === 'string' && i18n['text:title'] !== '' ? `<h2>${i18n['text:title']}</h2>` : ''}\n                    \n                    <button class=\"icon-picker-modal--close\" aria-label=\"Close\" data-interaction=\"close\">\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" stroke-width=\"1.5\">\n                          <path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M6.758 17.243 12.001 12m5.243-5.243L12 12m0 0L6.758 6.757M12.001 12l5.243 5.243\"/>\n                        </svg>\n                    </button>\n                </div>\n                \n                <input placeholder=\"${i18n['input:placeholder']}\" class=\"icon-picker-modal__search\" aria-label=\"${i18n['input:placeholder']}\" data-interaction=\"search\">\n                \n                <div class=\"icon-picker-modal__content\" data-element=\"content\"></div>\n            \n                ${!closeOnSelect ? `\n                    <div class=\"icon-picker-modal__footer\" data-element=\"footer\">\n                        <button type=\"button\" class=\"picker-save\" data-interaction=\"save\">${i18n['btn:save']}</button>\n                    </div>` : ''\n    }\n            </div>\n        </div>\n    `);\n\n    if (theme.includes('bootstrap')) {\n        modalElement.save?.classList.add('btn', 'btn-primary');\n        modalElement.search.classList.add('form-control');\n    }\n\n    return modalElement;\n}\n\n\nfunction getHTMLElements(str) {\n    const removeAttribute = (el, name) => {\n        const value = el.getAttribute(name);\n        el.removeAttribute(name);\n        return value;\n    };\n\n    const resolve = (element, base = {}) => {\n        const elementKey = removeAttribute(element, 'data-element');\n        elementKey && (base[elementKey] = element);\n\n        for (const child of Array.from(element.children)) {\n            const childInteractionKey = removeAttribute(child, 'data-interaction');\n\n            if (childInteractionKey) {\n                childInteractionKey && (base[childInteractionKey] = child);\n            }\n\n            resolve(child, base);\n        }\n\n        return base;\n    };\n\n    return resolve(stringToHTML(str));\n}\n","export const collections = {\n    'Material Design Icons': {\n        key: 'mdi',\n        prefix: 'mdi mdi-'\n    },\n    'FontAwesome Brands 5': {\n        key: 'fa-brands',\n        prefix: 'fab fa-'\n    },\n    'FontAwesome Solid 5': {\n        key: 'fa-solid',\n        prefix: 'fas fa-'\n\n    },\n    'FontAwesome Regular 5': {\n        key: 'fa-regular',\n        prefix: 'far fa-'\n    },\n    'Iconoir': {\n        key: 'iconoir',\n        prefix: 'iconoir-'\n    }\n}\n\n/**\n *\n * @param {array} collectionsOptions\n */\nexport function resolveCollection(collectionsOptions) {\n    let collectionResolved = Object.create({});\n\n    if (Array.isArray(collectionsOptions)) {\n        collectionsOptions.forEach((collection) => {\n            if (hasCollection(collection)) {\n                collectionResolved[collections[collection].key] = collections[collection]\n            }\n        })\n    }\n\n    return collectionResolved;\n}\n\n/**\n *\n * @param {string} collection\n * @returns {boolean}\n */\nfunction hasCollection(collection) {\n    return collections.hasOwnProperty(collection)\n}\n","import * as _ from \"./utlis/utils\";\nimport template from \"./template\";\nimport {resolveCollection} from \"./utlis/collections\";\n\nconst iconifyPath = 'https://raw.githubusercontent.com/iconify/collections-json/master/json';\n\nexport default class IconPicker {\n    static DEFAULT_OPTIONS = {\n        theme: 'default',\n        closeOnSelect: true,\n        defaultValue: null,\n        iconSource: [],\n        i18n: {\n            'input:placeholder': 'Search icon…',\n\n            'text:title': 'Select icon',\n            'text:empty': 'No results found…',\n\n            'btn:save': 'Save'\n        }\n    }\n\n    _eventListener = {\n        select: [],\n        save: [],\n        show: [],\n        hide: []\n    };\n\n    /**\n     *\n     * @param {string | HTMLElement} el\n     * @param {Object} options\n     */\n    constructor(el, options = {}) {\n        this.options = _.mergeDeep(IconPicker.DEFAULT_OPTIONS, options);\n        this.element = el;\n\n        // Initialize icon picker\n        this._preBuild();\n\n        if (this.element && this.options.iconSource.length > 0) {\n            this._binEvents();\n            this._renderdIcons();\n            this._createModal();\n        }\n    }\n\n    _preBuild() {\n        this.element = _.resolveElement(this.element);\n        this.root = template(this.options);\n\n        if (!Array.isArray(this.options.iconSource) && this.options.iconSource.length > 0) {\n            this.options.iconSource = [this.options.iconSource];\n        }\n    }\n\n    _binEvents() {\n        const {options, root, element} = this;\n        let iconsElements = [];\n\n        this._eventBindings = [\n            _.addEvent(element, 'click', () => this.show()),\n            _.addEvent(root.close, 'click', () => this.hide()),\n            _.addEvent(root.modal, 'click', (evt) => {\n                if (evt.target === root.modal) {\n                    this.hide();\n                }\n            }),\n            _.addEvent(root.search, 'keyup', _.debounce((evt) => {\n                const iconsResult = this.availableIcons.filter((obj) => obj.value.includes(evt.target.value.toLowerCase()));\n\n                if (!iconsElements.length) {\n                    iconsElements = document.querySelectorAll('.icon-element');\n                }\n\n                iconsElements.forEach((iconElement) => {\n                    iconElement.hidden = true;\n\n                    iconsResult.forEach((result) => {\n                        if (iconElement.classList.contains(result.value)) {\n                            iconElement.hidden = false;\n                        }\n                    });\n                });\n\n                const emptyElement = root.content.querySelector('.is-empty');\n\n                if (iconsResult.length > 0) {\n                    if (emptyElement) {\n                        emptyElement.remove();\n                    }\n                } else {\n                    if (!emptyElement) {\n                        root.content.appendChild(_.stringToHTML(`<div class=\"is-empty\">${options.i18n['text:empty']}</div>`));\n                    }\n                }\n            }, 250))\n        ];\n\n        if (!options.closeOnSelect) {\n            this._eventBindings.push(_.addEvent(root.save, 'click', () => this._onSave()));\n        }\n    }\n\n    /**\n     * Hide icon picker modal\n     */\n    hide() {\n        if (this.isOpen()) {\n            this.root.modal.classList.remove('is-visible');\n            this._emit('hide');\n\n            return this;\n        }\n\n        return false\n    }\n\n    /**\n     * Show icon picker modal\n     */\n    show() {\n        if (!this.isOpen()) {\n            this.root.modal.classList.add('is-visible');\n            this._emit('show');\n\n            return this;\n        }\n\n        return false\n    }\n\n    /**\n     * Check if modal is open\n     * @returns {boolean}\n     */\n    isOpen() {\n        return this.root.modal.classList.contains('is-visible');\n    }\n\n    /**\n     * Destroy icon picker instance and detach all events listeners\n     * @param {boolean} deleteInstance\n     */\n    destroy(deleteInstance = true) {\n        this.initialized = false;\n\n        // Remove elements events\n        this._eventBindings.forEach(args => _.removeEvent(...args));\n\n        // Delete instance\n        if (deleteInstance) {\n            Object.keys(this).forEach((key) => delete this[key]);\n        }\n    }\n\n    _emit(event, ...args) {\n        this._eventListener[event].forEach(cb => cb(...args, this));\n    }\n\n    on(event, callback) {\n        if (this._eventListener[event] !== undefined) {\n            this._eventListener[event].push(callback);\n            return this;\n        }\n\n        return false\n    }\n\n    off(event, callback) {\n        const callBacks = (this._eventListener[event] || []);\n        const index = callBacks.indexOf(callback);\n\n        if (~index) {\n            callBacks.splice(index, 1);\n        }\n\n        return this;\n    }\n\n    _createModal() {\n        document.body.appendChild(this.root.modal);\n\n        this.initialized = true;\n    }\n\n    _onSave() {\n        this._setValueInput()\n\n        this.hide();\n        this._emit('save', this.emitValues);\n    }\n\n    /**\n     * Generate icons elements\n     * @private\n     */\n    async _renderdIcons() {\n        const {root, options} = this;\n        let previousSelectedIcon = null;\n        let currentlySelectElement = null;\n        this.availableIcons = [];\n\n        root.content.innerHTML = '';\n\n        let icons = await this._getIcons();\n\n        icons.forEach((library) => {\n            for (const [key, value] of Object.entries(library.icons)) {\n                //@TODO: Mettre tout sur l'élément target\n                const iconTarget = document.createElement('button');\n                iconTarget.className = `icon-element ${key}`;\n\n                const iconElement = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\n                iconElement.setAttribute('height', '24');\n                iconElement.setAttribute('width', '24');\n                iconElement.setAttribute('viewBox', `0 0 ${value.width ? value.width : library.width} ${value.height ? value.height : library.height}`);\n                iconElement.dataset.value = library.prefix + key\n                iconElement.innerHTML = value.body;\n\n                if (library.chars) {\n                    iconElement.dataset.unicode = _.getKeyByValue(library.chars, key);\n                }\n\n                iconTarget.append(iconElement)\n\n                root.content.appendChild(iconTarget);\n\n                this.availableIcons.push({value: key, body: iconElement.outerHTML});\n\n                // Icon click event\n                iconTarget.addEventListener('click', (evt) => {\n                    if (this.currentlySelectName !== evt.currentTarget.firstChild.className) {\n                        evt.currentTarget.classList.add('is-selected');\n\n                        currentlySelectElement = evt.currentTarget;\n                        this.currentlySelectName = currentlySelectElement.firstChild.dataset.value;\n                        this.SVGString = iconElement.outerHTML;\n\n                        this.emitValues = {\n                            name: key,\n                            value: this.currentlySelectName,\n                            svg: this.SVGString,\n                        }\n\n                        if (library.chars) {\n                            this.emitValues.unicode = iconElement.dataset.unicode\n                        }\n\n                        this._emit('select', this.emitValues);\n                    }\n\n                    if (previousSelectedIcon) {\n                        previousSelectedIcon.classList.remove('is-selected');\n                    }\n\n                    if (options.closeOnSelect) {\n                        this._onSave();\n                    }\n\n                    previousSelectedIcon = currentlySelectElement;\n                });\n            }\n        });\n\n        if (options.defaultValue) {\n            let defaultValueElement = document.querySelector(`[data-value=${options.defaultValue}]`);\n            let iconValue = options.defaultValue;\n\n            // Check if icon value or icon name\n            // @TODO: Une fois tout sur l'élémentTarget, revoir cette partie\n            if (defaultValueElement) {\n                defaultValueElement.parentElement.classList.add('is-selected');\n\n                previousSelectedIcon = defaultValueElement.parentElement;\n            } else {\n                defaultValueElement = document.querySelector(`.${options.defaultValue}`);\n                defaultValueElement.classList.add('is-selected');\n\n                iconValue = defaultValueElement.firstChild.dataset.value\n                previousSelectedIcon = defaultValueElement;\n            }\n\n            this.currentlySelectName = iconValue;\n            this._setValueInput();\n        }\n    }\n\n    /**\n     *\n     * @returns {string}\n     * @private\n     */\n    async _getIcons() {\n        const {options} = this\n        const iconsURL = [];\n\n        let sourceInformation = resolveCollection(options.iconSource);\n\n        if (options.iconSource.length > 0) {\n            for (const source of Object.values(sourceInformation)) {\n                iconsURL.push(`${iconifyPath}/${source.key}.json`)\n            }\n        }\n\n        return await Promise.all(iconsURL.map((iconURL) => fetch(iconURL).then((response) => response.json())))\n            .then((iconLibrary) => {\n                iconLibrary.forEach((library) => {\n                    library.prefix = sourceInformation[library.prefix].prefix\n                })\n\n                return iconLibrary;\n            });\n    }\n\n    /**\n     * Set value into input element\n     * @param value\n     * @private\n     */\n    _setValueInput(value = this.currentlySelectName) {\n        const {element} = this;\n\n        if (element instanceof HTMLInputElement && this.currentlySelectName) {\n            element.value = value;\n        }\n    }\n}\n"],"names":["root","factory","exports","module","define","amd","self","__webpack_require__","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","eventListener","method","elements","events","fn","Array","isArray","el","ev","slice","arguments","addEvent","bind","removeEvent","stringToHTML","str","window","DOMParser","parseFromString","body","firstElementChild","dom","document","createElement","innerHTML","isObject","item","mergeDeep","target","source","output","assign","keys","forEach","getKeyByValue","object","value","find","options","theme","i18n","closeOnSelect","modalElement","removeAttribute","name","getAttribute","resolve","element","base","elementKey","child","from","children","childInteractionKey","getHTMLElements","includes","save","classList","add","search","collections","prefix","resolveCollection","collectionsOptions","collectionResolved","create","collection","hasCollection","IconPicker","static","defaultValue","iconSource","_eventListener","select","show","hide","constructor","this","DEFAULT_OPTIONS","_preBuild","length","_binEvents","_renderdIcons","_createModal","val","HTMLElement","querySelector","template","iconsElements","callback","delay","timer","_eventBindings","close","modal","evt","iconsResult","availableIcons","filter","toLowerCase","querySelectorAll","iconElement","hidden","result","contains","emptyElement","content","remove","appendChild","args","context","clearTimeout","setTimeout","apply","push","_onSave","isOpen","_emit","destroy","deleteInstance","initialized","event","cb","on","undefined","off","callBacks","index","indexOf","splice","_setValueInput","emitValues","async","previousSelectedIcon","currentlySelectElement","_getIcons","library","entries","icons","iconTarget","className","createElementNS","setAttribute","width","height","dataset","chars","unicode","append","outerHTML","addEventListener","currentlySelectName","currentTarget","firstChild","SVGString","svg","defaultValueElement","iconValue","parentElement","iconsURL","sourceInformation","values","Promise","all","map","iconURL","fetch","then","response","json","iconLibrary","HTMLInputElement"],"sourceRoot":""}